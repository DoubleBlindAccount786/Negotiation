	ANSWER:	1

JUSTIFICATION_TREE:
query(b,d,lowest) :-
    evidence(-student),
    not buy(a,c,high) :-
        not accept_price(a,c,high) :-
            not accept_price_1(a,c,high) :-
                maker(a,c) :-
                    product(a) :-
                        product_a :-
                            evidence(product(a)).
                    evidence(maker(a,c)).
            not accept_price_2(a,c,high),
            not accept_price_3(a,c,high) :-
                proved(maker(a,c)).
    not buy(b,d,high) :-
        not accept_price(b,d,high) :-
            not accept_price_1(b,d,high),
            not accept_price_2(b,d,high) :-
                maker(b,d) :-
                    product(b) :-
                        product_b :-
                            evidence(product(b)).
                    evidence(maker(b,d)).
            not accept_price_3(b,d,high).
    not buy(a,c,low) :-
        not accept_price(a,c,low) :-
            not accept_price_1(a,c,low) :-
                proved(maker(a,c)).
            not accept_price_2(a,c,low),
            accept_price_3(a,c,low) :-
                proved(maker(a,c)).
            not accept_price_1_check :-
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},Var4 | {Var4 \= c},Var5),
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},c,Var6) :-
                    not maker(Var3 | {Var3 \= a,Var3 \= b},c) :-
                        not product(Var3 | {Var3 \= a,Var3 \= b}),
                        not product(Var3 | {Var3 \= a,Var3 \= b}).
                not accept_price_1(a,Var7 | {Var7 \= c},Var8),
                not accept_price_1(a,c,Var9 | {Var9 \= lowest}) :-
                    proved(maker(a,c)).
                accept_price_1(a,c,lowest) :-
                    proved(maker(a,c)).
                not sale(a,c,lowest) :-
                    not asked(sale(a,c,lowest)),
                    proved(product(a)),
                    proved(maker(a,c)),
                    proved(not asked(sale(a,c,lowest))),
                    neg_sale(a,c,lowest) :-
                        asked(-sale(a,c,lowest)).
                not accept_price_1(b,Var10 | {Var10 \= c},Var11),
                not accept_price_1(b,c,Var12) :-
                    not maker(b,c) :-
                        proved(product(b)),
                        not evidence(maker(b,c)),
                        proved(not evidence(maker(b,c))),
                        neg_maker(b,c) :-
                            evidence(-maker(b,c)).
            accept_price_2_check :-
                accept_price_2(b,d,lowest) :-
                    maker(b,d) :-
                        product(b) :-
                            proved(product_b).
                        proved(evidence(maker(b,d))).
                sale(b,d,lowest) :-
                    proved(product(b)),
                    proved(maker(b,d)),
                    not asked(sale(b,d,lowest)),
                    not neg_sale(b,d,lowest) :-
                        not asked(-sale(b,d,lowest)),
                        proved(product(b)),
                        proved(maker(b,d)),
                        proved(not asked(-sale(b,d,lowest))),
                        chs(sale(b,d,lowest)).
    not buy(b,d,low) :-
        not accept_price(b,d,low) :-
            not accept_price_1(b,d,low),
            not accept_price_2(b,d,low) :-
                proved(maker(b,d)).
            not accept_price_3(b,d,low).
    buy(b,d,lowest) :-
        accept_price(b,d,lowest) :-
            proved(accept_price_2(b,d,lowest)),
            proved(not accept_price_1_check).
        quality(b) :-
            evidence(quality(b)).
        proved(not asked(sale(b,d,lowest))),
        proved(not asked(-sale(b,d,lowest))).
global_constraint.

MODEL:
{ query(b,d,lowest),  evidence(-student),  not buy(a,c,high),  not accept_price(a,c,high),  not accept_price_1(a,c,high),  maker(a,c),  product(a),  product_a,  evidence(product(a)),  evidence(maker(a,c)),  not accept_price_2(a,c,high),  not accept_price_3(a,c,high),  not buy(b,d,high),  not accept_price(b,d,high),  not accept_price_1(b,d,high),  not accept_price_2(b,d,high),  maker(b,d),  product(b),  product_b,  evidence(product(b)),  evidence(maker(b,d)),  not accept_price_3(b,d,high),  not buy(a,c,low),  not accept_price(a,c,low),  not accept_price_1(a,c,low),  not accept_price_2(a,c,low),  accept_price_3(a,c,low),  not accept_price_1_check,  not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},Var4 | {Var4 \= c},Var5),  not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},c,Var6),  not maker(Var3 | {Var3 \= a,Var3 \= b},c),  not product(Var3 | {Var3 \= a,Var3 \= b}),  not accept_price_1(a,Var7 | {Var7 \= c},Var8),  not accept_price_1(a,c,Var9 | {Var9 \= lowest}),  accept_price_1(a,c,lowest),  not sale(a,c,lowest),  not asked(sale(a,c,lowest)),  neg_sale(a,c,lowest),  asked(-sale(a,c,lowest)),  not accept_price_1(b,Var10 | {Var10 \= c},Var11),  not accept_price_1(b,c,Var12),  not maker(b,c),  not evidence(maker(b,c)),  neg_maker(b,c),  evidence(-maker(b,c)),  accept_price_2_check,  accept_price_2(b,d,lowest),  sale(b,d,lowest),  not asked(sale(b,d,lowest)),  not neg_sale(b,d,lowest),  not asked(-sale(b,d,lowest)),  not buy(b,d,low),  not accept_price(b,d,low),  not accept_price_1(b,d,low),  not accept_price_2(b,d,low),  not accept_price_3(b,d,low),  buy(b,d,lowest),  accept_price(b,d,lowest),  quality(b),  evidence(quality(b)) }
BINDINGS: 
Product = b 
Maker = d 
Price = lowest