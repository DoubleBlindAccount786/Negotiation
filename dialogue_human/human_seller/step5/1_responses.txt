% QUERY:?- query(Product,Maker,Price).

	ANSWER:	1 (in 21.96 ms)

JUSTIFICATION_TREE:
query(a,c,low) :-
    evidence(age_older_than_65),
    buy(a,c,low) :-
        accept_price(a,c,low) :-
            accept_price_3(a,c,low) :-
                maker(a,c) :-
                    product(a) :-
                        product_a :-
                            evidence(product(a)).
                    evidence(maker(a,c)).
            not accept_price_1_check :-
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},Var4 | {Var4 \= c},Var5),
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},c,Var6) :-
                    not maker(Var3 | {Var3 \= a,Var3 \= b},c) :-
                        not product(Var3 | {Var3 \= a,Var3 \= b}),
                        not product(Var3 | {Var3 \= a,Var3 \= b}).
                not accept_price_1(a,Var7 | {Var7 \= c},Var8),
                not accept_price_1(a,c,Var9 | {Var9 \= lowest}) :-
                    proved(maker(a,c)).
                accept_price_1(a,c,lowest) :-
                    proved(maker(a,c)).
                not sale(a,c,lowest) :-
                    not asked(sale(a,c,lowest)),
                    proved(product(a)),
                    proved(maker(a,c)),
                    proved(not asked(sale(a,c,lowest))),
                    neg_sale(a,c,lowest) :-
                        asked(-sale(a,c,lowest)).
                not accept_price_1(b,Var10 | {Var10 \= c},Var11),
                not accept_price_1(b,c,Var12) :-
                    not maker(b,c) :-
                        not product(b) :-
                            not product_b :-
                                not evidence(product(b)),
                                proved(not evidence(product(b))),
                                neg_product_b :-
                                    not evidence(-product(b)),
                                    chs(not product_b).
                        proved(not product(b)).
            not accept_price_2_check :-
                not accept_price_2(Var13 | {Var13 \= a,Var13 \= b},Var14 | {Var14 \= d},Var15),
                not accept_price_2(Var13 | {Var13 \= a,Var13 \= b},d,Var16) :-
                    not maker(Var13 | {Var13 \= a,Var13 \= b},d) :-
                        not product(Var13 | {Var13 \= a,Var13 \= b}),
                        not product(Var13 | {Var13 \= a,Var13 \= b}).
                not accept_price_2(a,Var17 | {Var17 \= d},Var18),
                not accept_price_2(a,d,Var19) :-
                    not maker(a,d) :-
                        proved(product(a)),
                        not evidence(maker(a,d)),
                        proved(not evidence(maker(a,d))),
                        neg_maker(a,d) :-
                            not evidence(-maker(a,d)),
                            chs(not maker(a,d)).
                not accept_price_2(b,Var20 | {Var20 \= d},Var21),
                not accept_price_2(b,d,Var22) :-
                    not maker(b,d) :-
                        proved(not product(b)).
        quality(a) :-
            evidence(quality(a)).
        not asked(sale(a,c,low)),
        not asked(-sale(a,c,low)).
global_constraint.

MODEL:
{ query(a,c,low),  evidence(age_older_than_65),  buy(a,c,low),  accept_price(a,c,low),  maker(a,c),  product(a),  product_a,  evidence(product(a)),  evidence(maker(a,c)),  quality(a),  evidence(quality(a)) }
BINDINGS: 
Product = a 
Maker = c 
Price = low


	ANSWER:	2 (in 17.153 ms)

JUSTIFICATION_TREE:
query(a,c,low) :-
    evidence(age_older_than_65),
    buy(a,c,low) :-
        accept_price(a,c,low) :-
            accept_price_3(a,c,low) :-
                maker(a,c) :-
                    product(a) :-
                        product_a :-
                            evidence(product(a)).
                    evidence(maker(a,c)).
            not accept_price_1_check :-
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},Var4 | {Var4 \= c},Var5),
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},c,Var6) :-
                    not maker(Var3 | {Var3 \= a,Var3 \= b},c) :-
                        not product(Var3 | {Var3 \= a,Var3 \= b}),
                        not product(Var3 | {Var3 \= a,Var3 \= b}).
                not accept_price_1(a,Var7 | {Var7 \= c},Var8),
                not accept_price_1(a,c,Var9 | {Var9 \= lowest}) :-
                    proved(maker(a,c)).
                accept_price_1(a,c,lowest) :-
                    proved(maker(a,c)).
                not sale(a,c,lowest) :-
                    not asked(sale(a,c,lowest)),
                    proved(product(a)),
                    proved(maker(a,c)),
                    proved(not asked(sale(a,c,lowest))),
                    neg_sale(a,c,lowest) :-
                        asked(-sale(a,c,lowest)).
                not accept_price_1(b,Var10 | {Var10 \= c},Var11),
                not accept_price_1(b,c,Var12) :-
                    not maker(b,c) :-
                        not product(b) :-
                            not product_b :-
                                not evidence(product(b)),
                                proved(not evidence(product(b))),
                                neg_product_b :-
                                    not evidence(-product(b)),
                                    chs(not product_b).
                        proved(not product(b)).
            not accept_price_2_check :-
                not accept_price_2(Var13 | {Var13 \= a,Var13 \= b},Var14 | {Var14 \= d},Var15),
                not accept_price_2(Var13 | {Var13 \= a,Var13 \= b},d,Var16) :-
                    not maker(Var13 | {Var13 \= a,Var13 \= b},d) :-
                        not product(Var13 | {Var13 \= a,Var13 \= b}),
                        not product(Var13 | {Var13 \= a,Var13 \= b}).
                not accept_price_2(a,Var17 | {Var17 \= d},Var18),
                not accept_price_2(a,d,Var19 | {Var19 \= lowest}) :-
                    maker(a,d) :-
                        proved(product(a)),
                        not evidence(maker(a,d)),
                        not neg_maker(a,d) :-
                            proved(product(a)),
                            not evidence(-maker(a,d)),
                            proved(not evidence(-maker(a,d))),
                            chs(maker(a,d)).
                accept_price_2(a,d,lowest) :-
                    proved(maker(a,d)).
                not sale(a,d,lowest) :-
                    not asked(sale(a,d,lowest)),
                    proved(product(a)),
                    proved(maker(a,d)),
                    proved(not asked(sale(a,d,lowest))),
                    neg_sale(a,d,lowest) :-
                        not asked(-sale(a,d,lowest)),
                        chs(not sale(a,d,lowest)).
                not accept_price_2(b,Var20 | {Var20 \= d},Var21),
                not accept_price_2(b,d,Var22) :-
                    not maker(b,d) :-
                        proved(not product(b)).
        quality(a) :-
            evidence(quality(a)).
        not asked(sale(a,c,low)),
        not asked(-sale(a,c,low)).
global_constraint.

MODEL:
{ query(a,c,low),  evidence(age_older_than_65),  buy(a,c,low),  accept_price(a,c,low),  maker(a,c),  product(a),  product_a,  evidence(product(a)),  evidence(maker(a,c)),  maker(a,d),  quality(a),  evidence(quality(a)) }
BINDINGS: 
Product = a 
Maker = c 
Price = low


	ANSWER:	3 (in 30.806 ms)

JUSTIFICATION_TREE:
query(a,c,low) :-
    evidence(age_older_than_65),
    buy(a,c,low) :-
        accept_price(a,c,low) :-
            accept_price_3(a,c,low) :-
                maker(a,c) :-
                    product(a) :-
                        product_a :-
                            evidence(product(a)).
                    evidence(maker(a,c)).
            not accept_price_1_check :-
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},Var4 | {Var4 \= c},Var5),
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},c,Var6) :-
                    not maker(Var3 | {Var3 \= a,Var3 \= b},c) :-
                        not product(Var3 | {Var3 \= a,Var3 \= b}),
                        not product(Var3 | {Var3 \= a,Var3 \= b}).
                not accept_price_1(a,Var7 | {Var7 \= c},Var8),
                not accept_price_1(a,c,Var9 | {Var9 \= lowest}) :-
                    proved(maker(a,c)).
                accept_price_1(a,c,lowest) :-
                    proved(maker(a,c)).
                not sale(a,c,lowest) :-
                    not asked(sale(a,c,lowest)),
                    proved(product(a)),
                    proved(maker(a,c)),
                    proved(not asked(sale(a,c,lowest))),
                    neg_sale(a,c,lowest) :-
                        asked(-sale(a,c,lowest)).
                not accept_price_1(b,Var10 | {Var10 \= c},Var11),
                not accept_price_1(b,c,Var12) :-
                    not maker(b,c) :-
                        product(b) :-
                            product_b :-
                                not evidence(product(b)),
                                not neg_product_b :-
                                    not evidence(-product(b)),
                                    proved(not evidence(-product(b))),
                                    chs(product_b).
                        not evidence(maker(b,c)),
                        proved(product(b)),
                        proved(not evidence(maker(b,c))),
                        neg_maker(b,c) :-
                            not evidence(-maker(b,c)),
                            chs(not maker(b,c)).
            not accept_price_2_check :-
                not accept_price_2(Var13 | {Var13 \= a,Var13 \= b},Var14 | {Var14 \= d},Var15),
                not accept_price_2(Var13 | {Var13 \= a,Var13 \= b},d,Var16) :-
                    not maker(Var13 | {Var13 \= a,Var13 \= b},d) :-
                        not product(Var13 | {Var13 \= a,Var13 \= b}),
                        not product(Var13 | {Var13 \= a,Var13 \= b}).
                not accept_price_2(a,Var17 | {Var17 \= d},Var18),
                not accept_price_2(a,d,Var19) :-
                    not maker(a,d) :-
                        proved(product(a)),
                        not evidence(maker(a,d)),
                        proved(not evidence(maker(a,d))),
                        neg_maker(a,d) :-
                            not evidence(-maker(a,d)),
                            chs(not maker(a,d)).
                not accept_price_2(b,Var20 | {Var20 \= d},Var21),
                not accept_price_2(b,d,Var22) :-
                    not maker(b,d) :-
                        proved(product(b)),
                        not evidence(maker(b,d)),
                        proved(not evidence(maker(b,d))),
                        neg_maker(b,d) :-
                            not evidence(-maker(b,d)),
                            chs(not maker(b,d)).
        quality(a) :-
            evidence(quality(a)).
        not asked(sale(a,c,low)),
        not asked(-sale(a,c,low)).
global_constraint.

MODEL:
{ query(a,c,low),  evidence(age_older_than_65),  buy(a,c,low),  accept_price(a,c,low),  maker(a,c),  product(a),  product_a,  evidence(product(a)),  evidence(maker(a,c)),  product(b),  product_b,  quality(a),  evidence(quality(a)) }
BINDINGS: 
Product = a 
Maker = c 
Price = low


	ANSWER:	4 (in 17.489 ms)

JUSTIFICATION_TREE:
query(a,c,low) :-
    evidence(age_older_than_65),
    buy(a,c,low) :-
        accept_price(a,c,low) :-
            accept_price_3(a,c,low) :-
                maker(a,c) :-
                    product(a) :-
                        product_a :-
                            evidence(product(a)).
                    evidence(maker(a,c)).
            not accept_price_1_check :-
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},Var4 | {Var4 \= c},Var5),
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},c,Var6) :-
                    not maker(Var3 | {Var3 \= a,Var3 \= b},c) :-
                        not product(Var3 | {Var3 \= a,Var3 \= b}),
                        not product(Var3 | {Var3 \= a,Var3 \= b}).
                not accept_price_1(a,Var7 | {Var7 \= c},Var8),
                not accept_price_1(a,c,Var9 | {Var9 \= lowest}) :-
                    proved(maker(a,c)).
                accept_price_1(a,c,lowest) :-
                    proved(maker(a,c)).
                not sale(a,c,lowest) :-
                    not asked(sale(a,c,lowest)),
                    proved(product(a)),
                    proved(maker(a,c)),
                    proved(not asked(sale(a,c,lowest))),
                    neg_sale(a,c,lowest) :-
                        asked(-sale(a,c,lowest)).
                not accept_price_1(b,Var10 | {Var10 \= c},Var11),
                not accept_price_1(b,c,Var12) :-
                    not maker(b,c) :-
                        product(b) :-
                            product_b :-
                                not evidence(product(b)),
                                not neg_product_b :-
                                    not evidence(-product(b)),
                                    proved(not evidence(-product(b))),
                                    chs(product_b).
                        not evidence(maker(b,c)),
                        proved(product(b)),
                        proved(not evidence(maker(b,c))),
                        neg_maker(b,c) :-
                            not evidence(-maker(b,c)),
                            chs(not maker(b,c)).
            not accept_price_2_check :-
                not accept_price_2(Var13 | {Var13 \= a,Var13 \= b},Var14 | {Var14 \= d},Var15),
                not accept_price_2(Var13 | {Var13 \= a,Var13 \= b},d,Var16) :-
                    not maker(Var13 | {Var13 \= a,Var13 \= b},d) :-
                        not product(Var13 | {Var13 \= a,Var13 \= b}),
                        not product(Var13 | {Var13 \= a,Var13 \= b}).
                not accept_price_2(a,Var17 | {Var17 \= d},Var18),
                not accept_price_2(a,d,Var19) :-
                    not maker(a,d) :-
                        proved(product(a)),
                        not evidence(maker(a,d)),
                        proved(not evidence(maker(a,d))),
                        neg_maker(a,d) :-
                            not evidence(-maker(a,d)),
                            chs(not maker(a,d)).
                not accept_price_2(b,Var20 | {Var20 \= d},Var21),
                not accept_price_2(b,d,Var22 | {Var22 \= lowest}) :-
                    maker(b,d) :-
                        proved(product(b)),
                        not evidence(maker(b,d)),
                        not neg_maker(b,d) :-
                            proved(product(b)),
                            not evidence(-maker(b,d)),
                            proved(not evidence(-maker(b,d))),
                            chs(maker(b,d)).
                accept_price_2(b,d,lowest) :-
                    proved(maker(b,d)).
                not sale(b,d,lowest) :-
                    not asked(sale(b,d,lowest)),
                    proved(product(b)),
                    proved(maker(b,d)),
                    proved(not asked(sale(b,d,lowest))),
                    neg_sale(b,d,lowest) :-
                        not asked(-sale(b,d,lowest)),
                        chs(not sale(b,d,lowest)).
        quality(a) :-
            evidence(quality(a)).
        not asked(sale(a,c,low)),
        not asked(-sale(a,c,low)).
global_constraint.

MODEL:
{ query(a,c,low),  evidence(age_older_than_65),  buy(a,c,low),  accept_price(a,c,low),  maker(a,c),  product(a),  product_a,  evidence(product(a)),  evidence(maker(a,c)),  product(b),  product_b,  maker(b,d),  quality(a),  evidence(quality(a)) }
BINDINGS: 
Product = a 
Maker = c 
Price = low


	ANSWER:	5 (in 24.966 ms)

JUSTIFICATION_TREE:
query(a,c,low) :-
    evidence(age_older_than_65),
    buy(a,c,low) :-
        accept_price(a,c,low) :-
            accept_price_3(a,c,low) :-
                maker(a,c) :-
                    product(a) :-
                        product_a :-
                            evidence(product(a)).
                    evidence(maker(a,c)).
            not accept_price_1_check :-
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},Var4 | {Var4 \= c},Var5),
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},c,Var6) :-
                    not maker(Var3 | {Var3 \= a,Var3 \= b},c) :-
                        not product(Var3 | {Var3 \= a,Var3 \= b}),
                        not product(Var3 | {Var3 \= a,Var3 \= b}).
                not accept_price_1(a,Var7 | {Var7 \= c},Var8),
                not accept_price_1(a,c,Var9 | {Var9 \= lowest}) :-
                    proved(maker(a,c)).
                accept_price_1(a,c,lowest) :-
                    proved(maker(a,c)).
                not sale(a,c,lowest) :-
                    not asked(sale(a,c,lowest)),
                    proved(product(a)),
                    proved(maker(a,c)),
                    proved(not asked(sale(a,c,lowest))),
                    neg_sale(a,c,lowest) :-
                        asked(-sale(a,c,lowest)).
                not accept_price_1(b,Var10 | {Var10 \= c},Var11),
                not accept_price_1(b,c,Var12) :-
                    not maker(b,c) :-
                        product(b) :-
                            product_b :-
                                not evidence(product(b)),
                                not neg_product_b :-
                                    not evidence(-product(b)),
                                    proved(not evidence(-product(b))),
                                    chs(product_b).
                        not evidence(maker(b,c)),
                        proved(product(b)),
                        proved(not evidence(maker(b,c))),
                        neg_maker(b,c) :-
                            not evidence(-maker(b,c)),
                            chs(not maker(b,c)).
            not accept_price_2_check :-
                not accept_price_2(Var13 | {Var13 \= a,Var13 \= b},Var14 | {Var14 \= d},Var15),
                not accept_price_2(Var13 | {Var13 \= a,Var13 \= b},d,Var16) :-
                    not maker(Var13 | {Var13 \= a,Var13 \= b},d) :-
                        not product(Var13 | {Var13 \= a,Var13 \= b}),
                        not product(Var13 | {Var13 \= a,Var13 \= b}).
                not accept_price_2(a,Var17 | {Var17 \= d},Var18),
                not accept_price_2(a,d,Var19 | {Var19 \= lowest}) :-
                    maker(a,d) :-
                        proved(product(a)),
                        not evidence(maker(a,d)),
                        not neg_maker(a,d) :-
                            proved(product(a)),
                            not evidence(-maker(a,d)),
                            proved(not evidence(-maker(a,d))),
                            chs(maker(a,d)).
                accept_price_2(a,d,lowest) :-
                    proved(maker(a,d)).
                not sale(a,d,lowest) :-
                    not asked(sale(a,d,lowest)),
                    proved(product(a)),
                    proved(maker(a,d)),
                    proved(not asked(sale(a,d,lowest))),
                    neg_sale(a,d,lowest) :-
                        not asked(-sale(a,d,lowest)),
                        chs(not sale(a,d,lowest)).
                not accept_price_2(b,Var20 | {Var20 \= d},Var21),
                not accept_price_2(b,d,Var22) :-
                    not maker(b,d) :-
                        proved(product(b)),
                        not evidence(maker(b,d)),
                        proved(not evidence(maker(b,d))),
                        neg_maker(b,d) :-
                            not evidence(-maker(b,d)),
                            chs(not maker(b,d)).
        quality(a) :-
            evidence(quality(a)).
        not asked(sale(a,c,low)),
        not asked(-sale(a,c,low)).
global_constraint.

MODEL:
{ query(a,c,low),  evidence(age_older_than_65),  buy(a,c,low),  accept_price(a,c,low),  maker(a,c),  product(a),  product_a,  evidence(product(a)),  evidence(maker(a,c)),  product(b),  product_b,  maker(a,d),  quality(a),  evidence(quality(a)) }
BINDINGS: 
Product = a 
Maker = c 
Price = low


	ANSWER:	6 (in 18.05 ms)

JUSTIFICATION_TREE:
query(a,c,low) :-
    evidence(age_older_than_65),
    buy(a,c,low) :-
        accept_price(a,c,low) :-
            accept_price_3(a,c,low) :-
                maker(a,c) :-
                    product(a) :-
                        product_a :-
                            evidence(product(a)).
                    evidence(maker(a,c)).
            not accept_price_1_check :-
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},Var4 | {Var4 \= c},Var5),
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},c,Var6) :-
                    not maker(Var3 | {Var3 \= a,Var3 \= b},c) :-
                        not product(Var3 | {Var3 \= a,Var3 \= b}),
                        not product(Var3 | {Var3 \= a,Var3 \= b}).
                not accept_price_1(a,Var7 | {Var7 \= c},Var8),
                not accept_price_1(a,c,Var9 | {Var9 \= lowest}) :-
                    proved(maker(a,c)).
                accept_price_1(a,c,lowest) :-
                    proved(maker(a,c)).
                not sale(a,c,lowest) :-
                    not asked(sale(a,c,lowest)),
                    proved(product(a)),
                    proved(maker(a,c)),
                    proved(not asked(sale(a,c,lowest))),
                    neg_sale(a,c,lowest) :-
                        asked(-sale(a,c,lowest)).
                not accept_price_1(b,Var10 | {Var10 \= c},Var11),
                not accept_price_1(b,c,Var12) :-
                    not maker(b,c) :-
                        product(b) :-
                            product_b :-
                                not evidence(product(b)),
                                not neg_product_b :-
                                    not evidence(-product(b)),
                                    proved(not evidence(-product(b))),
                                    chs(product_b).
                        not evidence(maker(b,c)),
                        proved(product(b)),
                        proved(not evidence(maker(b,c))),
                        neg_maker(b,c) :-
                            not evidence(-maker(b,c)),
                            chs(not maker(b,c)).
            not accept_price_2_check :-
                not accept_price_2(Var13 | {Var13 \= a,Var13 \= b},Var14 | {Var14 \= d},Var15),
                not accept_price_2(Var13 | {Var13 \= a,Var13 \= b},d,Var16) :-
                    not maker(Var13 | {Var13 \= a,Var13 \= b},d) :-
                        not product(Var13 | {Var13 \= a,Var13 \= b}),
                        not product(Var13 | {Var13 \= a,Var13 \= b}).
                not accept_price_2(a,Var17 | {Var17 \= d},Var18),
                not accept_price_2(a,d,Var19 | {Var19 \= lowest}) :-
                    maker(a,d) :-
                        proved(product(a)),
                        not evidence(maker(a,d)),
                        not neg_maker(a,d) :-
                            proved(product(a)),
                            not evidence(-maker(a,d)),
                            proved(not evidence(-maker(a,d))),
                            chs(maker(a,d)).
                accept_price_2(a,d,lowest) :-
                    proved(maker(a,d)).
                not sale(a,d,lowest) :-
                    not asked(sale(a,d,lowest)),
                    proved(product(a)),
                    proved(maker(a,d)),
                    proved(not asked(sale(a,d,lowest))),
                    neg_sale(a,d,lowest) :-
                        not asked(-sale(a,d,lowest)),
                        chs(not sale(a,d,lowest)).
                not accept_price_2(b,Var20 | {Var20 \= d},Var21),
                not accept_price_2(b,d,Var22 | {Var22 \= lowest}) :-
                    maker(b,d) :-
                        proved(product(b)),
                        not evidence(maker(b,d)),
                        not neg_maker(b,d) :-
                            proved(product(b)),
                            not evidence(-maker(b,d)),
                            proved(not evidence(-maker(b,d))),
                            chs(maker(b,d)).
                accept_price_2(b,d,lowest) :-
                    proved(maker(b,d)).
                not sale(b,d,lowest) :-
                    not asked(sale(b,d,lowest)),
                    proved(product(b)),
                    proved(maker(b,d)),
                    proved(not asked(sale(b,d,lowest))),
                    neg_sale(b,d,lowest) :-
                        not asked(-sale(b,d,lowest)),
                        chs(not sale(b,d,lowest)).
        quality(a) :-
            evidence(quality(a)).
        not asked(sale(a,c,low)),
        not asked(-sale(a,c,low)).
global_constraint.

MODEL:
{ query(a,c,low),  evidence(age_older_than_65),  buy(a,c,low),  accept_price(a,c,low),  maker(a,c),  product(a),  product_a,  evidence(product(a)),  evidence(maker(a,c)),  product(b),  product_b,  maker(a,d),  maker(b,d),  quality(a),  evidence(quality(a)) }
BINDINGS: 
Product = a 
Maker = c 
Price = low


	ANSWER:	7 (in 39.241 ms)

JUSTIFICATION_TREE:
query(a,c,low) :-
    evidence(age_older_than_65),
    buy(a,c,low) :-
        accept_price(a,c,low) :-
            accept_price_3(a,c,low) :-
                maker(a,c) :-
                    product(a) :-
                        product_a :-
                            evidence(product(a)).
                    evidence(maker(a,c)).
            not accept_price_1_check :-
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},Var4 | {Var4 \= c},Var5),
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},c,Var6) :-
                    not maker(Var3 | {Var3 \= a,Var3 \= b},c) :-
                        not product(Var3 | {Var3 \= a,Var3 \= b}),
                        not product(Var3 | {Var3 \= a,Var3 \= b}).
                not accept_price_1(a,Var7 | {Var7 \= c},Var8),
                not accept_price_1(a,c,Var9 | {Var9 \= lowest}) :-
                    proved(maker(a,c)).
                accept_price_1(a,c,lowest) :-
                    proved(maker(a,c)).
                not sale(a,c,lowest) :-
                    not asked(sale(a,c,lowest)),
                    proved(product(a)),
                    proved(maker(a,c)),
                    proved(not asked(sale(a,c,lowest))),
                    neg_sale(a,c,lowest) :-
                        asked(-sale(a,c,lowest)).
                not accept_price_1(b,Var10 | {Var10 \= c},Var11),
                not accept_price_1(b,c,Var12 | {Var12 \= lowest}) :-
                    maker(b,c) :-
                        product(b) :-
                            product_b :-
                                not evidence(product(b)),
                                not neg_product_b :-
                                    not evidence(-product(b)),
                                    proved(not evidence(-product(b))),
                                    chs(product_b).
                        not evidence(maker(b,c)),
                        not neg_maker(b,c) :-
                            proved(product(b)),
                            not evidence(-maker(b,c)),
                            proved(not evidence(-maker(b,c))),
                            chs(maker(b,c)).
                accept_price_1(b,c,lowest) :-
                    proved(maker(b,c)).
                not sale(b,c,lowest) :-
                    not asked(sale(b,c,lowest)),
                    proved(product(b)),
                    proved(maker(b,c)),
                    proved(not asked(sale(b,c,lowest))),
                    neg_sale(b,c,lowest) :-
                        not asked(-sale(b,c,lowest)),
                        chs(not sale(b,c,lowest)).
            not accept_price_2_check :-
                not accept_price_2(Var13 | {Var13 \= a,Var13 \= b},Var14 | {Var14 \= d},Var15),
                not accept_price_2(Var13 | {Var13 \= a,Var13 \= b},d,Var16) :-
                    not maker(Var13 | {Var13 \= a,Var13 \= b},d) :-
                        not product(Var13 | {Var13 \= a,Var13 \= b}),
                        not product(Var13 | {Var13 \= a,Var13 \= b}).
                not accept_price_2(a,Var17 | {Var17 \= d},Var18),
                not accept_price_2(a,d,Var19) :-
                    not maker(a,d) :-
                        proved(product(a)),
                        not evidence(maker(a,d)),
                        proved(not evidence(maker(a,d))),
                        neg_maker(a,d) :-
                            not evidence(-maker(a,d)),
                            chs(not maker(a,d)).
                not accept_price_2(b,Var20 | {Var20 \= d},Var21),
                not accept_price_2(b,d,Var22) :-
                    not maker(b,d) :-
                        proved(product(b)),
                        not evidence(maker(b,d)),
                        proved(not evidence(maker(b,d))),
                        neg_maker(b,d) :-
                            not evidence(-maker(b,d)),
                            chs(not maker(b,d)).
        quality(a) :-
            evidence(quality(a)).
        not asked(sale(a,c,low)),
        not asked(-sale(a,c,low)).
global_constraint.

MODEL:
{ query(a,c,low),  evidence(age_older_than_65),  buy(a,c,low),  accept_price(a,c,low),  maker(a,c),  product(a),  product_a,  evidence(product(a)),  evidence(maker(a,c)),  maker(b,c),  product(b),  product_b,  quality(a),  evidence(quality(a)) }
BINDINGS: 
Product = a 
Maker = c 
Price = low


	ANSWER:	8 (in 17.532 ms)

JUSTIFICATION_TREE:
query(a,c,low) :-
    evidence(age_older_than_65),
    buy(a,c,low) :-
        accept_price(a,c,low) :-
            accept_price_3(a,c,low) :-
                maker(a,c) :-
                    product(a) :-
                        product_a :-
                            evidence(product(a)).
                    evidence(maker(a,c)).
            not accept_price_1_check :-
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},Var4 | {Var4 \= c},Var5),
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},c,Var6) :-
                    not maker(Var3 | {Var3 \= a,Var3 \= b},c) :-
                        not product(Var3 | {Var3 \= a,Var3 \= b}),
                        not product(Var3 | {Var3 \= a,Var3 \= b}).
                not accept_price_1(a,Var7 | {Var7 \= c},Var8),
                not accept_price_1(a,c,Var9 | {Var9 \= lowest}) :-
                    proved(maker(a,c)).
                accept_price_1(a,c,lowest) :-
                    proved(maker(a,c)).
                not sale(a,c,lowest) :-
                    not asked(sale(a,c,lowest)),
                    proved(product(a)),
                    proved(maker(a,c)),
                    proved(not asked(sale(a,c,lowest))),
                    neg_sale(a,c,lowest) :-
                        asked(-sale(a,c,lowest)).
                not accept_price_1(b,Var10 | {Var10 \= c},Var11),
                not accept_price_1(b,c,Var12 | {Var12 \= lowest}) :-
                    maker(b,c) :-
                        product(b) :-
                            product_b :-
                                not evidence(product(b)),
                                not neg_product_b :-
                                    not evidence(-product(b)),
                                    proved(not evidence(-product(b))),
                                    chs(product_b).
                        not evidence(maker(b,c)),
                        not neg_maker(b,c) :-
                            proved(product(b)),
                            not evidence(-maker(b,c)),
                            proved(not evidence(-maker(b,c))),
                            chs(maker(b,c)).
                accept_price_1(b,c,lowest) :-
                    proved(maker(b,c)).
                not sale(b,c,lowest) :-
                    not asked(sale(b,c,lowest)),
                    proved(product(b)),
                    proved(maker(b,c)),
                    proved(not asked(sale(b,c,lowest))),
                    neg_sale(b,c,lowest) :-
                        not asked(-sale(b,c,lowest)),
                        chs(not sale(b,c,lowest)).
            not accept_price_2_check :-
                not accept_price_2(Var13 | {Var13 \= a,Var13 \= b},Var14 | {Var14 \= d},Var15),
                not accept_price_2(Var13 | {Var13 \= a,Var13 \= b},d,Var16) :-
                    not maker(Var13 | {Var13 \= a,Var13 \= b},d) :-
                        not product(Var13 | {Var13 \= a,Var13 \= b}),
                        not product(Var13 | {Var13 \= a,Var13 \= b}).
                not accept_price_2(a,Var17 | {Var17 \= d},Var18),
                not accept_price_2(a,d,Var19) :-
                    not maker(a,d) :-
                        proved(product(a)),
                        not evidence(maker(a,d)),
                        proved(not evidence(maker(a,d))),
                        neg_maker(a,d) :-
                            not evidence(-maker(a,d)),
                            chs(not maker(a,d)).
                not accept_price_2(b,Var20 | {Var20 \= d},Var21),
                not accept_price_2(b,d,Var22 | {Var22 \= lowest}) :-
                    maker(b,d) :-
                        proved(product(b)),
                        not evidence(maker(b,d)),
                        not neg_maker(b,d) :-
                            proved(product(b)),
                            not evidence(-maker(b,d)),
                            proved(not evidence(-maker(b,d))),
                            chs(maker(b,d)).
                accept_price_2(b,d,lowest) :-
                    proved(maker(b,d)).
                not sale(b,d,lowest) :-
                    not asked(sale(b,d,lowest)),
                    proved(product(b)),
                    proved(maker(b,d)),
                    proved(not asked(sale(b,d,lowest))),
                    neg_sale(b,d,lowest) :-
                        not asked(-sale(b,d,lowest)),
                        chs(not sale(b,d,lowest)).
        quality(a) :-
            evidence(quality(a)).
        not asked(sale(a,c,low)),
        not asked(-sale(a,c,low)).
global_constraint.

MODEL:
{ query(a,c,low),  evidence(age_older_than_65),  buy(a,c,low),  accept_price(a,c,low),  maker(a,c),  product(a),  product_a,  evidence(product(a)),  evidence(maker(a,c)),  maker(b,c),  product(b),  product_b,  maker(b,d),  quality(a),  evidence(quality(a)) }
BINDINGS: 
Product = a 
Maker = c 
Price = low


	ANSWER:	9 (in 27.683 ms)

JUSTIFICATION_TREE:
query(a,c,low) :-
    evidence(age_older_than_65),
    buy(a,c,low) :-
        accept_price(a,c,low) :-
            accept_price_3(a,c,low) :-
                maker(a,c) :-
                    product(a) :-
                        product_a :-
                            evidence(product(a)).
                    evidence(maker(a,c)).
            not accept_price_1_check :-
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},Var4 | {Var4 \= c},Var5),
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},c,Var6) :-
                    not maker(Var3 | {Var3 \= a,Var3 \= b},c) :-
                        not product(Var3 | {Var3 \= a,Var3 \= b}),
                        not product(Var3 | {Var3 \= a,Var3 \= b}).
                not accept_price_1(a,Var7 | {Var7 \= c},Var8),
                not accept_price_1(a,c,Var9 | {Var9 \= lowest}) :-
                    proved(maker(a,c)).
                accept_price_1(a,c,lowest) :-
                    proved(maker(a,c)).
                not sale(a,c,lowest) :-
                    not asked(sale(a,c,lowest)),
                    proved(product(a)),
                    proved(maker(a,c)),
                    proved(not asked(sale(a,c,lowest))),
                    neg_sale(a,c,lowest) :-
                        asked(-sale(a,c,lowest)).
                not accept_price_1(b,Var10 | {Var10 \= c},Var11),
                not accept_price_1(b,c,Var12 | {Var12 \= lowest}) :-
                    maker(b,c) :-
                        product(b) :-
                            product_b :-
                                not evidence(product(b)),
                                not neg_product_b :-
                                    not evidence(-product(b)),
                                    proved(not evidence(-product(b))),
                                    chs(product_b).
                        not evidence(maker(b,c)),
                        not neg_maker(b,c) :-
                            proved(product(b)),
                            not evidence(-maker(b,c)),
                            proved(not evidence(-maker(b,c))),
                            chs(maker(b,c)).
                accept_price_1(b,c,lowest) :-
                    proved(maker(b,c)).
                not sale(b,c,lowest) :-
                    not asked(sale(b,c,lowest)),
                    proved(product(b)),
                    proved(maker(b,c)),
                    proved(not asked(sale(b,c,lowest))),
                    neg_sale(b,c,lowest) :-
                        not asked(-sale(b,c,lowest)),
                        chs(not sale(b,c,lowest)).
            not accept_price_2_check :-
                not accept_price_2(Var13 | {Var13 \= a,Var13 \= b},Var14 | {Var14 \= d},Var15),
                not accept_price_2(Var13 | {Var13 \= a,Var13 \= b},d,Var16) :-
                    not maker(Var13 | {Var13 \= a,Var13 \= b},d) :-
                        not product(Var13 | {Var13 \= a,Var13 \= b}),
                        not product(Var13 | {Var13 \= a,Var13 \= b}).
                not accept_price_2(a,Var17 | {Var17 \= d},Var18),
                not accept_price_2(a,d,Var19 | {Var19 \= lowest}) :-
                    maker(a,d) :-
                        proved(product(a)),
                        not evidence(maker(a,d)),
                        not neg_maker(a,d) :-
                            proved(product(a)),
                            not evidence(-maker(a,d)),
                            proved(not evidence(-maker(a,d))),
                            chs(maker(a,d)).
                accept_price_2(a,d,lowest) :-
                    proved(maker(a,d)).
                not sale(a,d,lowest) :-
                    not asked(sale(a,d,lowest)),
                    proved(product(a)),
                    proved(maker(a,d)),
                    proved(not asked(sale(a,d,lowest))),
                    neg_sale(a,d,lowest) :-
                        not asked(-sale(a,d,lowest)),
                        chs(not sale(a,d,lowest)).
                not accept_price_2(b,Var20 | {Var20 \= d},Var21),
                not accept_price_2(b,d,Var22) :-
                    not maker(b,d) :-
                        proved(product(b)),
                        not evidence(maker(b,d)),
                        proved(not evidence(maker(b,d))),
                        neg_maker(b,d) :-
                            not evidence(-maker(b,d)),
                            chs(not maker(b,d)).
        quality(a) :-
            evidence(quality(a)).
        not asked(sale(a,c,low)),
        not asked(-sale(a,c,low)).
global_constraint.

MODEL:
{ query(a,c,low),  evidence(age_older_than_65),  buy(a,c,low),  accept_price(a,c,low),  maker(a,c),  product(a),  product_a,  evidence(product(a)),  evidence(maker(a,c)),  maker(b,c),  product(b),  product_b,  maker(a,d),  quality(a),  evidence(quality(a)) }
BINDINGS: 
Product = a 
Maker = c 
Price = low


	ANSWER:	10 (in 21.55 ms)

JUSTIFICATION_TREE:
query(a,c,low) :-
    evidence(age_older_than_65),
    buy(a,c,low) :-
        accept_price(a,c,low) :-
            accept_price_3(a,c,low) :-
                maker(a,c) :-
                    product(a) :-
                        product_a :-
                            evidence(product(a)).
                    evidence(maker(a,c)).
            not accept_price_1_check :-
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},Var4 | {Var4 \= c},Var5),
                not accept_price_1(Var3 | {Var3 \= a,Var3 \= b},c,Var6) :-
                    not maker(Var3 | {Var3 \= a,Var3 \= b},c) :-
                        not product(Var3 | {Var3 \= a,Var3 \= b}),
                        not product(Var3 | {Var3 \= a,Var3 \= b}).
                not accept_price_1(a,Var7 | {Var7 \= c},Var8),
                not accept_price_1(a,c,Var9 | {Var9 \= lowest}) :-
                    proved(maker(a,c)).
                accept_price_1(a,c,lowest) :-
                    proved(maker(a,c)).
                not sale(a,c,lowest) :-
                    not asked(sale(a,c,lowest)),
                    proved(product(a)),
                    proved(maker(a,c)),
                    proved(not asked(sale(a,c,lowest))),
                    neg_sale(a,c,lowest) :-
                        asked(-sale(a,c,lowest)).
                not accept_price_1(b,Var10 | {Var10 \= c},Var11),
                not accept_price_1(b,c,Var12 | {Var12 \= lowest}) :-
                    maker(b,c) :-
                        product(b) :-
                            product_b :-
                                not evidence(product(b)),
                                not neg_product_b :-
                                    not evidence(-product(b)),
                                    proved(not evidence(-product(b))),
                                    chs(product_b).
                        not evidence(maker(b,c)),
                        not neg_maker(b,c) :-
                            proved(product(b)),
                            not evidence(-maker(b,c)),
                            proved(not evidence(-maker(b,c))),
                            chs(maker(b,c)).
                accept_price_1(b,c,lowest) :-
                    proved(maker(b,c)).
                not sale(b,c,lowest) :-
                    not asked(sale(b,c,lowest)),
                    proved(product(b)),
                    proved(maker(b,c)),
                    proved(not asked(sale(b,c,lowest))),
                    neg_sale(b,c,lowest) :-
                        not asked(-sale(b,c,lowest)),
                        chs(not sale(b,c,lowest)).
            not accept_price_2_check :-
                not accept_price_2(Var13 | {Var13 \= a,Var13 \= b},Var14 | {Var14 \= d},Var15),
                not accept_price_2(Var13 | {Var13 \= a,Var13 \= b},d,Var16) :-
                    not maker(Var13 | {Var13 \= a,Var13 \= b},d) :-
                        not product(Var13 | {Var13 \= a,Var13 \= b}),
                        not product(Var13 | {Var13 \= a,Var13 \= b}).
                not accept_price_2(a,Var17 | {Var17 \= d},Var18),
                not accept_price_2(a,d,Var19 | {Var19 \= lowest}) :-
                    maker(a,d) :-
                        proved(product(a)),
                        not evidence(maker(a,d)),
                        not neg_maker(a,d) :-
                            proved(product(a)),
                            not evidence(-maker(a,d)),
                            proved(not evidence(-maker(a,d))),
                            chs(maker(a,d)).
                accept_price_2(a,d,lowest) :-
                    proved(maker(a,d)).
                not sale(a,d,lowest) :-
                    not asked(sale(a,d,lowest)),
                    proved(product(a)),
                    proved(maker(a,d)),
                    proved(not asked(sale(a,d,lowest))),
                    neg_sale(a,d,lowest) :-
                        not asked(-sale(a,d,lowest)),
                        chs(not sale(a,d,lowest)).
                not accept_price_2(b,Var20 | {Var20 \= d},Var21),
                not accept_price_2(b,d,Var22 | {Var22 \= lowest}) :-
                    maker(b,d) :-
                        proved(product(b)),
                        not evidence(maker(b,d)),
                        not neg_maker(b,d) :-
                            proved(product(b)),
                            not evidence(-maker(b,d)),
                            proved(not evidence(-maker(b,d))),
                            chs(maker(b,d)).
                accept_price_2(b,d,lowest) :-
                    proved(maker(b,d)).
                not sale(b,d,lowest) :-
                    not asked(sale(b,d,lowest)),
                    proved(product(b)),
                    proved(maker(b,d)),
                    proved(not asked(sale(b,d,lowest))),
                    neg_sale(b,d,lowest) :-
                        not asked(-sale(b,d,lowest)),
                        chs(not sale(b,d,lowest)).
        quality(a) :-
            evidence(quality(a)).
        not asked(sale(a,c,low)),
        not asked(-sale(a,c,low)).
global_constraint.

MODEL:
{ query(a,c,low),  evidence(age_older_than_65),  buy(a,c,low),  accept_price(a,c,low),  maker(a,c),  product(a),  product_a,  evidence(product(a)),  evidence(maker(a,c)),  maker(b,c),  product(b),  product_b,  maker(a,d),  maker(b,d),  quality(a),  evidence(quality(a)) }
BINDINGS: 
Product = a 
Maker = c 
Price = low

